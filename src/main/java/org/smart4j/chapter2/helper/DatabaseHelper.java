package org.smart4j.chapter2.helper;import org.apache.commons.dbcp2.BasicDataSource;import org.apache.commons.dbutils.QueryRunner;import org.apache.commons.dbutils.handlers.BeanHandler;import org.apache.commons.dbutils.handlers.BeanListHandler;import org.apache.commons.dbutils.handlers.MapListHandler;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.smart4j.chapter2.util.CollectionUtil;import org.smart4j.chapter2.util.PropsUtil;import java.sql.Connection;import java.sql.SQLException;import java.util.ArrayList;import java.util.List;import java.util.Map;import java.util.Properties;/** * @ClassName DatabaseHelper * @Description TODO * @Author mac * @Date 2019-05-03 05:02 PM * Version 1.0 **/public class DatabaseHelper {    private static final ThreadLocal<Connection> CONNECTION_HOLDER = new ThreadLocal<Connection>();    private static final QueryRunner QUERY_RUNNER = new QueryRunner();    private static final BasicDataSource DATA_SOURCE;    private static final Logger LOGGER = LoggerFactory.getLogger(DatabaseHelper.class);    static {        Properties conf = PropsUtil.loadProps("config.properties");        String driver = conf.getProperty("jdbc.driver");        String url = conf.getProperty("jdbc.url");        String username = conf.getProperty("jdbc.username");        String password = conf.getProperty("jdbc.password");        DATA_SOURCE = new BasicDataSource();        DATA_SOURCE.setDriverClassName(driver);        DATA_SOURCE.setUrl(url);        DATA_SOURCE.setUsername(username);        DATA_SOURCE.setPassword(password);    }    public static Connection getConnection() {        Connection conn = CONNECTION_HOLDER.get();        if (conn == null) {            try {                conn = DATA_SOURCE.getConnection();            } catch (SQLException e) {                LOGGER.error("get connection failure", e);            } finally {                CONNECTION_HOLDER.set(conn);            }        }        return conn;    }    public static <T> List<T> queryEntityList(Class<T> entityClass, String sql, Object... params) {        List<T> entityList = null;        try {            entityList = QUERY_RUNNER.query(getConnection(), sql, new BeanListHandler<T>(entityClass), params);        } catch (SQLException e) {            LOGGER.error("query entity list failure", e);            throw new RuntimeException(e);        }        return entityList;    }    public static <T> T queryEntity(Class<T> entityClass, String sql, Object... params) {        T entity = null;        try {            entity = QUERY_RUNNER.query(getConnection(), sql, new BeanHandler<T>(entityClass), params);        } catch (SQLException e) {            LOGGER.error("query entity failure");            throw new RuntimeException(e);        }        return entity;    }    public static List<Map<String, Object>> executeQuery(String sql, Object... params){        List<Map<String, Object>> result = null;        try{            result = QUERY_RUNNER.query(getConnection(), sql, new MapListHandler(), params);        }catch (Exception e){            LOGGER.error("execute query failure", e);            throw new RuntimeException(e);        }        return result;    }    public static int executeUpdate(String sql, Object... paramrs){        int rows = 0;        try{            rows = QUERY_RUNNER.update(getConnection(), sql, paramrs);        }catch (Exception e){            LOGGER.error("execute update failure", e);            throw new RuntimeException(e);        }        return rows;    }    public static <T> boolean insertEntity(Class<T> entityClass, Map<String, Object> fieldMap){        if(CollectionUtil.isEmpty(fieldMap)){            LOGGER.error("can not insert entity: fieldMap is empty");            return false;        }        String sql = "INSERT INTO " + getTableName(entityClass);        StringBuilder columns = new StringBuilder("(");        StringBuilder values = new StringBuilder("(");        for(String fieldName : fieldMap.keySet()){            columns.append(fieldName).append(", ");            values.append("?,");        }        columns.replace(columns.lastIndexOf(","), columns.length(), ")");        values.replace(values.lastIndexOf(","), values.length(), ")");        sql += columns + " VALUES" + values;        Object[] params = fieldMap.values().toArray();        return executeUpdate(sql, params) == 1;    }    public static <T> boolean updateEntity(Class<T> entityClass, long id, Map<String, Object> fieldMap){        if(CollectionUtil.isEmpty(fieldMap)){            LOGGER.error("can not insert entity: fieldMap is empty");            return false;        }        String sql = "UPDATE " + getTableName(entityClass) + " SET ";        StringBuilder columns = new StringBuilder();        for(String fieldName : fieldMap.keySet()){            columns.append(fieldName).append("=?, ");        }        sql += columns.substring(0, columns.lastIndexOf(", ")) + " WHERE id=?";        List<Object> paramList = new ArrayList<Object>();        paramList.addAll(fieldMap.values());        paramList.add(id);        Object[] params = paramList.toArray();        return executeUpdate(sql, params) == 1;    }    public static <T> boolean deleteEntity(Class<T> entityClass, long id){        String sql = "DELETE FROM " +  getTableName(entityClass) + " WHERE id=?";        return executeUpdate(sql, id) == 1;    }    private static String getTableName(Class<?> entityClass) {        return entityClass.getSimpleName();    }}